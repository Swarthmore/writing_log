<?php
// $Id$
 
/**
 * Implements hook_menu().
 */
function writing_log_menu() {
	$items = array();
	$items['date-conflict'] = array(
		'title' => 'Date Conflict',
		'page callback' => 'writing_log_date_conflict_page',
		'page arguments' => array(1),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['date-select'] = array(
		'title' => 'Select Entry Date',
		'page callback' => 'writing_log_date_select_page',
		'page arguments' => array(),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
  	return $items;
}

/**
 * Implementation of hook_user_logout
 */
function writing_log_user_logout() {
	global $user;
	
	$user = null;
	
	// Destroy the current session, and reset $user to the anonymous user.
  	session_destroy();
  
	$redir_url = 'https://' . variable_get('cas_server', '') . ":" . variable_get('cas_port', '') . variable_get('cas_uri', '') . '/logout';
	$service_url = url('', array('absolute' => TRUE));
	drupal_goto ($redir_url, array('query' => array('url' => $service_url)));
}

/**
 * Returns TRUE if the user has a log entry for the passed in date
 */
function writing_log_user_has_entry($date = FALSE){
	static $log_dates = NULL;
	global $user;
	
	if ($user->uid){
		$date = writing_log_valid_date($date);
		
		if (!is_array($log_dates)){
			$log_dates = array();
			$result = db_query("select UNIX_TIMESTAMP(f.field_date_value) AS log_date, n.nid FROM {node} n LEFT JOIN {field_data_field_date} f ON f.revision_id = n.vid WHERE n.uid = :uid", array(':uid' => $user->uid)); 
			foreach($result AS $log){
				$log_dates[$log->nid] = date('Ymd', $log->log_date);
			}
		}
		foreach ($log_dates AS $nid=>$ldate){
			if ($date == $ldate){
				return $nid;
			}
		}
	}
	return FALSE;
}

/* sanitize the date argument */
function writing_log_valid_date($date){
	if (!preg_match('/^[0-9]{8}$/', $date)){
		return date('Ymd');
	}
	return $date;
}

/**
 * render the date conflict page 
 */
function writing_log_date_conflict_page($date){
	_writing_log_datepicker_js();
	$date = writing_log_valid_date($date);
	if (!$nid = writing_log_user_has_entry($date)){
		drupal_goto('node/add/writing-event/' . $date);
	}
  preg_match('/^([0-9]{4})([0-9]{2})([0-9]{2})$/', $date, $date_parts);
	$log_utime = mktime(0,0,0,(int)$date_parts[2],(int)$date_parts[3],(int)$date_parts[1]);
	//2012-09-17 14:33:49;
	$prettydate = date('F jS, Y', $log_utime);
	$editurl = url ('node/' . writing_log_user_has_entry($date) . '/edit');
 	$output = <<<DATECON
 	<h4>There is an existing entry for $prettydate.</h4>
 	<p>Select a different date below, <strong>OR</strong> <a href="$editurl">edit the existing entry for $prettydate.</a></p>
 	<div id="datepicker"></div>

DATECON;
	return $output;
}

/**
 * render the date pick page 
 */
function writing_log_date_select_page(){
	_writing_log_datepicker_js();
 	$output = <<<DATECON
 	<h4>Select a date for your entry below.</h4>
 	<div id="datepicker"></div>
DATECON;

	return $output;
}

function _writing_log_datepicker_js(){
	drupal_add_library('system','ui.datepicker');
	$datejs = <<<DATEJS
	jQuery(function(){
		jQuery("#datepicker").datepicker({
			dateFormat: 'yy-mm-dd',
			onSelect: function(dateText, inst) {
				document.location.href = Drupal.settings.basePath + 'node/add/writing-event/' + dateText.replace(/\-/g, "");
			}
		});
	});
DATEJS;
    drupal_add_js($datejs, 'inline');
}

/**
 * Homepage block info
 */
function writing_log_block_info() {
	$blocks['writing_log_grid'] = array(
   		// info: The name of the block.
    	'info' => t('Writing Log Calendar Grid View'),
    	'cache' => DRUPAL_CACHE_PER_USER
  	);
	$blocks['writing_log_new'] = array(
   		// info: The name of the block.
    	'info' => t('Add a Writing Log'),
    	'cache' => DRUPAL_CACHE_PER_USER
  	);
  	return $blocks;
}

function writing_log_block_view($delta = '') {
  global $user;
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'writing_log_grid':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Writing Log Calendar Grid View');
      // The content of the block is typically generated by calling a custom
      // function.
      writing_log_load_js_data();
      $mod_path = drupal_get_path('module', 'writing_log');
	  	$js_path = $mod_path . "/js";
	  	$css_path = $mod_path . "/css";
    	drupal_add_js($js_path . '/proto.js');
	  	drupal_add_css($css_path . '/proto.css');
      drupal_add_js(array('writing_log' => array('uid' => $user->uid)), 'setting');
      
      $output = '<div id="writing-events"><div class="grid-loading">Loading Data</div></div>';
      $output .= '<div id="writing-event-legend"><div>Legend:</div><div class="user-entry-new"><span></span> = New Entry</div><div class="user-entry"><span></span> = Entry</div><div class="add-new-entry"><span></span> = Add Entry</div><div class="comments"><span></span> = Comments</div><div class="new-comments"><span></span> = New (Unread) Comments</div></div>';
      $block['content'] = $output;
      break;
    case 'writing_log_new':
       $block['subject'] = t('Add Writing Log Entry');
       $content = '';
       if (!writing_log_user_has_entry()){
     		$content = '<div class="add-log-wrapper"><button>Add Entry for Today</button></div>';
     	}
       $block['content'] = $content;
       break;
  }
  return $block;
}

function writing_log_load_js_data(){
	$entry_content = _writing_log_get_view_json_data("data_feed", "Page");
	$user_content = _writing_log_get_view_json_data("user_data_feed", "Page");
	drupal_add_js ("var gridEntryData = " . $entry_content . ";\nvar gridUserData = " . $user_content . ";", array('type' => 'inline', 'scope' => 'header'));
}

/* helper function for load_js_data */
function _writing_log_get_view_json_data($view_name, $display_id){
	$data_view = views_get_view($view_name);
  	$view_content = $data_view->preview($display_id);
  	if (preg_match("/<div[^>]*>\s*(\{.+\})\s*<\/div>/", $view_content, $matches)){
  		return $matches[1];
  	}
    return "{}";
}

/**
 * change the displayed username if a display name is provided
 */
function writing_log_username_alter(&$name, $account) {
  $fieldinfo = field_get_items('user', user_load($account->uid), 'field_display_name');
  if ($fieldinfo) {
  	$name = $fieldinfo[0]['safe_value'];
  } 
}


/**
 * implementation of hook_form_alter()
 */
function writing_log_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == "writing_event_node_form"){
		$log_date = writing_log_valid_date(arg(3));
		if (writing_log_user_has_entry($log_date) AND arg(1) == 'add'){
			//entry exists! goto date selection page
			drupal_goto('date-conflict/' . $log_date);
		}
		if (arg(1) == 'add') { //new entry, lets initialize the values
			$date_str = writing_log_valid_date(arg(3));
			preg_match('/^([0-9]{4})([0-9]{2})([0-9]{2})$/', $date_str, $date_parts);
			$log_utime = mktime(0,0,0,(int)$date_parts[2],(int)$date_parts[3],(int)$date_parts[1]);
			//2012-09-17 14:33:49;
			$form['title']['#default_value'] = date('F jS, Y', $log_utime);
			$form['field_date']['und'][0]['value']['#default_value'] = date('Y-m-d H:i:s', $log_utime);
			$form['title']['#suffix'] = '<small>' . l(t('select different date'), 'date-select') . '</small>';
		}
		$form['title']['#type'] = $form['field_date']['und'][0]['value']['#type'] = 'hidden';
		$form['title']['#prefix'] = '<h2>' . $form['title']['#default_value'] . '</h2>';
	}
	if ($form_id == "comment_node_writing_event_form"){
		unset($form['author']['_author']);
		if (!$form['cid']['#value']){
			$form['comment_body']['und'][0]['#title'] = t('Add new comment');
		}
	}
}

/**
 *	Alter the assignment view's title to use the username
 */
function writing_log_views_pre_render(&$view){
  if ($view->name == 'view_all_entries' AND ($view->current_display == 'page' OR $view->current_display == 'page_1')){
  	$view->build_info['title'] = format_username(user_load($view->args[0])) . "'s Entries";
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 * This code is taken from the Better Formats module.
 *
 */
function writing_log_element_info_alter(&$type) {
	if (isset($type['text_format']['#process'])) {
		foreach ($type['text_format']['#process'] as &$callback) {
			if ($callback === 'filter_process_format') {
				$callback = 'writing_log_filter_process_format';
			}
		}
	}
}

/**
 * Callback for writing_log_element_info_alter().
 * Force the use of the Template HTML filter for Problems
 */
function writing_log_filter_process_format($element) {

	$element = filter_process_format($element);
	// Change input format to "Template HTML"
	if (isset($element['#bundle'])){
		if (($element['#bundle'] == 'writing_event')  AND in_array('full_html', array_keys($element['format']['format']['#options']))) {
			$element['format']['format']['#default_value'] = 'full_html';
			//hide the format fieldset
			$element['format']['#attributes']['style'] = "display:none";
			unset ($element['format']['guidelines'], $element['format']['help'] );
		}
	}
	return $element;
}

/**
 * Implements hook_theme().
 */
function writing_log_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['html__json_data_feed'] = array(
    'render element' => 'content',
    'base hook' => 'html',
    'template' => 'html--json-data-feed',
    'path' => drupal_get_path('module', 'writing_log'),
  );
  $theme['page__json_data_feed'] = array(
    'render element' => 'content',
    'base hook' => 'page',
    'template' => 'page--json-data-feed',
    'path' => drupal_get_path('module', 'writing_log'),
  );
  return $theme;
}




